/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BundleDeleteRequest,
  BundleDeleteResponse,
  BundleReadRequest,
  BundleReadResponse,
  BundleWriteRequest,
  BundleWriteResponse,
  Status,
} from '../models/index';
import {
    BundleDeleteRequestFromJSON,
    BundleDeleteRequestToJSON,
    BundleDeleteResponseFromJSON,
    BundleDeleteResponseToJSON,
    BundleReadRequestFromJSON,
    BundleReadRequestToJSON,
    BundleReadResponseFromJSON,
    BundleReadResponseToJSON,
    BundleWriteRequestFromJSON,
    BundleWriteRequestToJSON,
    BundleWriteResponseFromJSON,
    BundleWriteResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface BundleDeleteOperationRequest {
    tenantId: string;
    body: BundleDeleteRequest;
}

export interface BundleReadOperationRequest {
    tenantId: string;
    body: BundleReadRequest;
}

export interface BundleWriteOperationRequest {
    tenantId: string;
    body: BundleWriteRequest;
}

/**
 * 
 */
export class BundleApi extends runtime.BaseAPI {

    /**
     * delete bundle
     */
    async bundleDeleteRaw(requestParameters: BundleDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundleDeleteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling bundleDelete().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling bundleDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/bundle/delete`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BundleDeleteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleDeleteResponseFromJSON(jsonValue));
    }

    /**
     * delete bundle
     */
    async bundleDelete(requestParameters: BundleDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundleDeleteResponse> {
        const response = await this.bundleDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read bundle
     */
    async bundleReadRaw(requestParameters: BundleReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundleReadResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling bundleRead().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling bundleRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/bundle/read`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BundleReadRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleReadResponseFromJSON(jsonValue));
    }

    /**
     * read bundle
     */
    async bundleRead(requestParameters: BundleReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundleReadResponse> {
        const response = await this.bundleReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * write bundle
     */
    async bundleWriteRaw(requestParameters: BundleWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundleWriteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling bundleWrite().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling bundleWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/bundle/write`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BundleWriteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleWriteResponseFromJSON(jsonValue));
    }

    /**
     * write bundle
     */
    async bundleWrite(requestParameters: BundleWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundleWriteResponse> {
        const response = await this.bundleWriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
