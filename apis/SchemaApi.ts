/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ItContainsTheTenantIdToIdentifyTheTenantAndMetadataOfTheSchemaToBeEditedWithTheCorrespondingEditsToVariousEntities,
  SchemaListResponse,
  SchemaPartialWriteResponse,
  SchemaReadResponse,
  SchemaWriteResponse,
  SchemasListRequest,
  SchemasReadRequest,
  SchemasWriteRequest,
  Status,
} from '../models/index';
import {
    ItContainsTheTenantIdToIdentifyTheTenantAndMetadataOfTheSchemaToBeEditedWithTheCorrespondingEditsToVariousEntitiesFromJSON,
    ItContainsTheTenantIdToIdentifyTheTenantAndMetadataOfTheSchemaToBeEditedWithTheCorrespondingEditsToVariousEntitiesToJSON,
    SchemaListResponseFromJSON,
    SchemaListResponseToJSON,
    SchemaPartialWriteResponseFromJSON,
    SchemaPartialWriteResponseToJSON,
    SchemaReadResponseFromJSON,
    SchemaReadResponseToJSON,
    SchemaWriteResponseFromJSON,
    SchemaWriteResponseToJSON,
    SchemasListRequestFromJSON,
    SchemasListRequestToJSON,
    SchemasReadRequestFromJSON,
    SchemasReadRequestToJSON,
    SchemasWriteRequestFromJSON,
    SchemasWriteRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface SchemasListOperationRequest {
    tenantId: string;
    body: SchemasListRequest;
}

export interface SchemasPartialWriteRequest {
    tenantId: string;
    body: ItContainsTheTenantIdToIdentifyTheTenantAndMetadataOfTheSchemaToBeEditedWithTheCorrespondingEditsToVariousEntities;
}

export interface SchemasReadOperationRequest {
    tenantId: string;
    body: SchemasReadRequest;
}

export interface SchemasWriteOperationRequest {
    tenantId: string;
    body: SchemasWriteRequest;
}

/**
 * 
 */
export class SchemaApi extends runtime.BaseAPI {

    /**
     * list schema
     */
    async schemasListRaw(requestParameters: SchemasListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaListResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling schemasList().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling schemasList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/schemas/list`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasListRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaListResponseFromJSON(jsonValue));
    }

    /**
     * list schema
     */
    async schemasList(requestParameters: SchemasListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaListResponse> {
        const response = await this.schemasListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update your authorization model
     */
    async schemasPartialWriteRaw(requestParameters: SchemasPartialWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaPartialWriteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling schemasPartialWrite().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling schemasPartialWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/schemas/partial-write`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ItContainsTheTenantIdToIdentifyTheTenantAndMetadataOfTheSchemaToBeEditedWithTheCorrespondingEditsToVariousEntitiesToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaPartialWriteResponseFromJSON(jsonValue));
    }

    /**
     * partially update your authorization model
     */
    async schemasPartialWrite(requestParameters: SchemasPartialWriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaPartialWriteResponse> {
        const response = await this.schemasPartialWriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read schema
     */
    async schemasReadRaw(requestParameters: SchemasReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaReadResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling schemasRead().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling schemasRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/schemas/read`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasReadRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaReadResponseFromJSON(jsonValue));
    }

    /**
     * read schema
     */
    async schemasRead(requestParameters: SchemasReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaReadResponse> {
        const response = await this.schemasReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * write schema
     */
    async schemasWriteRaw(requestParameters: SchemasWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaWriteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling schemasWrite().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling schemasWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/schemas/write`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasWriteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaWriteResponseFromJSON(jsonValue));
    }

    /**
     * write schema
     */
    async schemasWrite(requestParameters: SchemasWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaWriteResponse> {
        const response = await this.schemasWriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
