/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttributeReadResponse,
  BundleRunRequest,
  BundleRunResponse,
  DataAttributesReadRequest,
  DataDeleteRequest,
  DataDeleteResponse,
  DataRelationshipsReadRequest,
  DataWriteRequest,
  DataWriteResponse,
  RelationshipDeleteRequest,
  RelationshipDeleteResponse,
  RelationshipReadResponse,
  RelationshipWriteResponse,
  RelationshipsWriteRequest,
  Status,
} from '../models/index';
import {
    AttributeReadResponseFromJSON,
    AttributeReadResponseToJSON,
    BundleRunRequestFromJSON,
    BundleRunRequestToJSON,
    BundleRunResponseFromJSON,
    BundleRunResponseToJSON,
    DataAttributesReadRequestFromJSON,
    DataAttributesReadRequestToJSON,
    DataDeleteRequestFromJSON,
    DataDeleteRequestToJSON,
    DataDeleteResponseFromJSON,
    DataDeleteResponseToJSON,
    DataRelationshipsReadRequestFromJSON,
    DataRelationshipsReadRequestToJSON,
    DataWriteRequestFromJSON,
    DataWriteRequestToJSON,
    DataWriteResponseFromJSON,
    DataWriteResponseToJSON,
    RelationshipDeleteRequestFromJSON,
    RelationshipDeleteRequestToJSON,
    RelationshipDeleteResponseFromJSON,
    RelationshipDeleteResponseToJSON,
    RelationshipReadResponseFromJSON,
    RelationshipReadResponseToJSON,
    RelationshipWriteResponseFromJSON,
    RelationshipWriteResponseToJSON,
    RelationshipsWriteRequestFromJSON,
    RelationshipsWriteRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface BundleRunOperationRequest {
    tenantId: string;
    body: BundleRunRequest;
}

export interface DataAttributesReadOperationRequest {
    tenantId: string;
    body: DataAttributesReadRequest;
}

export interface DataDeleteOperationRequest {
    tenantId: string;
    body: DataDeleteRequest;
}

export interface DataRelationshipsReadOperationRequest {
    tenantId: string;
    body: DataRelationshipsReadRequest;
}

export interface DataWriteOperationRequest {
    tenantId: string;
    body: DataWriteRequest;
}

export interface RelationshipsDeleteRequest {
    tenantId: string;
    body: RelationshipDeleteRequest;
}

export interface RelationshipsWriteOperationRequest {
    tenantId: string;
    body: RelationshipsWriteRequest;
}

/**
 * 
 */
export class DataApi extends runtime.BaseAPI {

    /**
     * run bundle
     */
    async bundleRunRaw(requestParameters: BundleRunOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BundleRunResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling bundleRun().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling bundleRun().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/data/run-bundle`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BundleRunRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BundleRunResponseFromJSON(jsonValue));
    }

    /**
     * run bundle
     */
    async bundleRun(requestParameters: BundleRunOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BundleRunResponse> {
        const response = await this.bundleRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read attributes
     */
    async dataAttributesReadRaw(requestParameters: DataAttributesReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeReadResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling dataAttributesRead().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling dataAttributesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/data/attributes/read`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataAttributesReadRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeReadResponseFromJSON(jsonValue));
    }

    /**
     * read attributes
     */
    async dataAttributesRead(requestParameters: DataAttributesReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeReadResponse> {
        const response = await this.dataAttributesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete data
     */
    async dataDeleteRaw(requestParameters: DataDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataDeleteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling dataDelete().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling dataDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/data/delete`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataDeleteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataDeleteResponseFromJSON(jsonValue));
    }

    /**
     * delete data
     */
    async dataDelete(requestParameters: DataDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataDeleteResponse> {
        const response = await this.dataDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read relationships
     */
    async dataRelationshipsReadRaw(requestParameters: DataRelationshipsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipReadResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling dataRelationshipsRead().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling dataRelationshipsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/data/relationships/read`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataRelationshipsReadRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipReadResponseFromJSON(jsonValue));
    }

    /**
     * read relationships
     */
    async dataRelationshipsRead(requestParameters: DataRelationshipsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipReadResponse> {
        const response = await this.dataRelationshipsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * write data
     */
    async dataWriteRaw(requestParameters: DataWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataWriteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling dataWrite().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling dataWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/data/write`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataWriteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataWriteResponseFromJSON(jsonValue));
    }

    /**
     * write data
     */
    async dataWrite(requestParameters: DataWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataWriteResponse> {
        const response = await this.dataWriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete relationships
     */
    async relationshipsDeleteRaw(requestParameters: RelationshipsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipDeleteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling relationshipsDelete().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling relationshipsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/relationships/delete`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RelationshipDeleteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipDeleteResponseFromJSON(jsonValue));
    }

    /**
     * delete relationships
     */
    async relationshipsDelete(requestParameters: RelationshipsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipDeleteResponse> {
        const response = await this.relationshipsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * write relationships
     */
    async relationshipsWriteRaw(requestParameters: RelationshipsWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RelationshipWriteResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling relationshipsWrite().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling relationshipsWrite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/relationships/write`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RelationshipsWriteRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RelationshipWriteResponseFromJSON(jsonValue));
    }

    /**
     * write relationships
     */
    async relationshipsWrite(requestParameters: RelationshipsWriteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RelationshipWriteResponse> {
        const response = await this.relationshipsWriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
