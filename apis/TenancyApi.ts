/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Status,
  TenantCreateRequest,
  TenantCreateResponse,
  TenantDeleteResponse,
  TenantListRequest,
  TenantListResponse,
} from '../models/index';
import {
    StatusFromJSON,
    StatusToJSON,
    TenantCreateRequestFromJSON,
    TenantCreateRequestToJSON,
    TenantCreateResponseFromJSON,
    TenantCreateResponseToJSON,
    TenantDeleteResponseFromJSON,
    TenantDeleteResponseToJSON,
    TenantListRequestFromJSON,
    TenantListRequestToJSON,
    TenantListResponseFromJSON,
    TenantListResponseToJSON,
} from '../models/index';

export interface TenantsCreateRequest {
    body: TenantCreateRequest;
}

export interface TenantsDeleteRequest {
    id: string;
}

export interface TenantsListRequest {
    body: TenantListRequest;
}

/**
 * 
 */
export class TenancyApi extends runtime.BaseAPI {

    /**
     * create tenant
     */
    async tenantsCreateRaw(requestParameters: TenantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantCreateResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tenantsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantCreateRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantCreateResponseFromJSON(jsonValue));
    }

    /**
     * create tenant
     */
    async tenantsCreate(requestParameters: TenantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantCreateResponse> {
        const response = await this.tenantsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete tenant
     */
    async tenantsDeleteRaw(requestParameters: TenantsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDeleteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tenantsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDeleteResponseFromJSON(jsonValue));
    }

    /**
     * delete tenant
     */
    async tenantsDelete(requestParameters: TenantsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDeleteResponse> {
        const response = await this.tenantsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list tenants
     */
    async tenantsListRaw(requestParameters: TenantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantListResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tenantsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantListRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantListResponseFromJSON(jsonValue));
    }

    /**
     * list tenants
     */
    async tenantsList(requestParameters: TenantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantListResponse> {
        const response = await this.tenantsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
