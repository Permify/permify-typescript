/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PermissionCheckResponse,
  PermissionExpandResponse,
  PermissionLookupEntityResponse,
  PermissionLookupSubjectResponse,
  PermissionSubjectPermissionResponse,
  PermissionsCheckRequest,
  PermissionsExpandRequest,
  PermissionsLookupEntityRequest,
  PermissionsLookupSubjectRequest,
  PermissionsSubjectPermissionRequest,
  Status,
  StreamResultOfPermissionLookupEntityStreamResponse,
} from '../models/index';
import {
    PermissionCheckResponseFromJSON,
    PermissionCheckResponseToJSON,
    PermissionExpandResponseFromJSON,
    PermissionExpandResponseToJSON,
    PermissionLookupEntityResponseFromJSON,
    PermissionLookupEntityResponseToJSON,
    PermissionLookupSubjectResponseFromJSON,
    PermissionLookupSubjectResponseToJSON,
    PermissionSubjectPermissionResponseFromJSON,
    PermissionSubjectPermissionResponseToJSON,
    PermissionsCheckRequestFromJSON,
    PermissionsCheckRequestToJSON,
    PermissionsExpandRequestFromJSON,
    PermissionsExpandRequestToJSON,
    PermissionsLookupEntityRequestFromJSON,
    PermissionsLookupEntityRequestToJSON,
    PermissionsLookupSubjectRequestFromJSON,
    PermissionsLookupSubjectRequestToJSON,
    PermissionsSubjectPermissionRequestFromJSON,
    PermissionsSubjectPermissionRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    StreamResultOfPermissionLookupEntityStreamResponseFromJSON,
    StreamResultOfPermissionLookupEntityStreamResponseToJSON,
} from '../models/index';

export interface PermissionsCheckOperationRequest {
    tenantId: string;
    body: PermissionsCheckRequest;
}

export interface PermissionsExpandOperationRequest {
    tenantId: string;
    body: PermissionsExpandRequest;
}

export interface PermissionsLookupEntityOperationRequest {
    tenantId: string;
    body: PermissionsLookupEntityRequest;
}

export interface PermissionsLookupEntityStreamRequest {
    tenantId: string;
    body: PermissionsLookupEntityRequest;
}

export interface PermissionsLookupSubjectOperationRequest {
    tenantId: string;
    body: PermissionsLookupSubjectRequest;
}

export interface PermissionsSubjectPermissionOperationRequest {
    tenantId: string;
    body: PermissionsSubjectPermissionRequest;
}

/**
 * 
 */
export class PermissionApi extends runtime.BaseAPI {

    /**
     * check api
     */
    async permissionsCheckRaw(requestParameters: PermissionsCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionCheckResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling permissionsCheck().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling permissionsCheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/permissions/check`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionsCheckRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionCheckResponseFromJSON(jsonValue));
    }

    /**
     * check api
     */
    async permissionsCheck(requestParameters: PermissionsCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionCheckResponse> {
        const response = await this.permissionsCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * expand api
     */
    async permissionsExpandRaw(requestParameters: PermissionsExpandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionExpandResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling permissionsExpand().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling permissionsExpand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/permissions/expand`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionsExpandRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionExpandResponseFromJSON(jsonValue));
    }

    /**
     * expand api
     */
    async permissionsExpand(requestParameters: PermissionsExpandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionExpandResponse> {
        const response = await this.permissionsExpandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lookup entity
     */
    async permissionsLookupEntityRaw(requestParameters: PermissionsLookupEntityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionLookupEntityResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling permissionsLookupEntity().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling permissionsLookupEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/permissions/lookup-entity`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionsLookupEntityRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionLookupEntityResponseFromJSON(jsonValue));
    }

    /**
     * lookup entity
     */
    async permissionsLookupEntity(requestParameters: PermissionsLookupEntityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionLookupEntityResponse> {
        const response = await this.permissionsLookupEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lookup entity stream
     */
    async permissionsLookupEntityStreamRaw(requestParameters: PermissionsLookupEntityStreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfPermissionLookupEntityStreamResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling permissionsLookupEntityStream().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling permissionsLookupEntityStream().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/permissions/lookup-entity-stream`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionsLookupEntityRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfPermissionLookupEntityStreamResponseFromJSON(jsonValue));
    }

    /**
     * lookup entity stream
     */
    async permissionsLookupEntityStream(requestParameters: PermissionsLookupEntityStreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfPermissionLookupEntityStreamResponse> {
        const response = await this.permissionsLookupEntityStreamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * lookup-subject
     */
    async permissionsLookupSubjectRaw(requestParameters: PermissionsLookupSubjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionLookupSubjectResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling permissionsLookupSubject().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling permissionsLookupSubject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/permissions/lookup-subject`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionsLookupSubjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionLookupSubjectResponseFromJSON(jsonValue));
    }

    /**
     * lookup-subject
     */
    async permissionsLookupSubject(requestParameters: PermissionsLookupSubjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionLookupSubjectResponse> {
        const response = await this.permissionsLookupSubjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * subject permission
     */
    async permissionsSubjectPermissionRaw(requestParameters: PermissionsSubjectPermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionSubjectPermissionResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling permissionsSubjectPermission().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling permissionsSubjectPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant_id}/permissions/subject-permission`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionsSubjectPermissionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionSubjectPermissionResponseFromJSON(jsonValue));
    }

    /**
     * subject permission
     */
    async permissionsSubjectPermission(requestParameters: PermissionsSubjectPermissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionSubjectPermissionResponse> {
        const response = await this.permissionsSubjectPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
