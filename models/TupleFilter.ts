/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SubjectFilter } from './SubjectFilter';
import {
    SubjectFilterFromJSON,
    SubjectFilterFromJSONTyped,
    SubjectFilterToJSON,
} from './SubjectFilter';
import type { EntityFilter } from './EntityFilter';
import {
    EntityFilterFromJSON,
    EntityFilterFromJSONTyped,
    EntityFilterToJSON,
} from './EntityFilter';

/**
 * TupleFilter is used to filter tuples based on the entity, relation and the subject.
 * @export
 * @interface TupleFilter
 */
export interface TupleFilter {
    /**
     * 
     * @type {EntityFilter}
     * @memberof TupleFilter
     */
    entity?: EntityFilter;
    /**
     * 
     * @type {string}
     * @memberof TupleFilter
     */
    relation?: string;
    /**
     * 
     * @type {SubjectFilter}
     * @memberof TupleFilter
     */
    subject?: SubjectFilter;
}

/**
 * Check if a given object implements the TupleFilter interface.
 */
export function instanceOfTupleFilter(value: object): value is TupleFilter {
    return true;
}

export function TupleFilterFromJSON(json: any): TupleFilter {
    return TupleFilterFromJSONTyped(json, false);
}

export function TupleFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): TupleFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'entity': json['entity'] == null ? undefined : EntityFilterFromJSON(json['entity']),
        'relation': json['relation'] == null ? undefined : json['relation'],
        'subject': json['subject'] == null ? undefined : SubjectFilterFromJSON(json['subject']),
    };
}

export function TupleFilterToJSON(value?: TupleFilter | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'entity': EntityFilterToJSON(value['entity']),
        'relation': value['relation'],
        'subject': SubjectFilterToJSON(value['subject']),
    };
}

