/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EntityDefinition } from './EntityDefinition';
import {
    EntityDefinitionFromJSON,
    EntityDefinitionFromJSONTyped,
    EntityDefinitionToJSON,
} from './EntityDefinition';
import type { SchemaDefinitionReference } from './SchemaDefinitionReference';
import {
    SchemaDefinitionReferenceFromJSON,
    SchemaDefinitionReferenceFromJSONTyped,
    SchemaDefinitionReferenceToJSON,
} from './SchemaDefinitionReference';
import type { RuleDefinition } from './RuleDefinition';
import {
    RuleDefinitionFromJSON,
    RuleDefinitionFromJSONTyped,
    RuleDefinitionToJSON,
} from './RuleDefinition';

/**
 * The SchemaDefinition message provides definitions for entities and rules,
 * and includes references to clarify whether a name refers to an entity or a rule.
 * @export
 * @interface SchemaDefinition
 */
export interface SchemaDefinition {
    /**
     * Map of entity definitions. The key is the entity name, and the value is the corresponding EntityDefinition.
     * @type {{ [key: string]: EntityDefinition; }}
     * @memberof SchemaDefinition
     */
    entityDefinitions?: { [key: string]: EntityDefinition; };
    /**
     * Map of rule definitions. The key is the rule name, and the value is the corresponding RuleDefinition.
     * @type {{ [key: string]: RuleDefinition; }}
     * @memberof SchemaDefinition
     */
    ruleDefinitions?: { [key: string]: RuleDefinition; };
    /**
     * Map of references to signify whether a string refers to an entity or a rule.
     * @type {{ [key: string]: SchemaDefinitionReference; }}
     * @memberof SchemaDefinition
     */
    references?: { [key: string]: SchemaDefinitionReference; };
}

/**
 * Check if a given object implements the SchemaDefinition interface.
 */
export function instanceOfSchemaDefinition(value: object): value is SchemaDefinition {
    return true;
}

export function SchemaDefinitionFromJSON(json: any): SchemaDefinition {
    return SchemaDefinitionFromJSONTyped(json, false);
}

export function SchemaDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'entityDefinitions': json['entityDefinitions'] == null ? undefined : (mapValues(json['entityDefinitions'], EntityDefinitionFromJSON)),
        'ruleDefinitions': json['ruleDefinitions'] == null ? undefined : (mapValues(json['ruleDefinitions'], RuleDefinitionFromJSON)),
        'references': json['references'] == null ? undefined : (mapValues(json['references'], SchemaDefinitionReferenceFromJSON)),
    };
}

export function SchemaDefinitionToJSON(value?: SchemaDefinition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'entityDefinitions': value['entityDefinitions'] == null ? undefined : (mapValues(value['entityDefinitions'], EntityDefinitionToJSON)),
        'ruleDefinitions': value['ruleDefinitions'] == null ? undefined : (mapValues(value['ruleDefinitions'], RuleDefinitionToJSON)),
        'references': value['references'] == null ? undefined : (mapValues(value['references'], SchemaDefinitionReferenceToJSON)),
    };
}

