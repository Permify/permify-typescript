/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExpandTreeNodeOperation } from './ExpandTreeNodeOperation';
import {
    ExpandTreeNodeOperationFromJSON,
    ExpandTreeNodeOperationFromJSONTyped,
    ExpandTreeNodeOperationToJSON,
} from './ExpandTreeNodeOperation';
import type { Expand } from './Expand';
import {
    ExpandFromJSON,
    ExpandFromJSONTyped,
    ExpandToJSON,
} from './Expand';

/**
 * ExpandTreeNode represents a node in an expansion tree with a specific operation and its children.
 * @export
 * @interface ExpandTreeNode
 */
export interface ExpandTreeNode {
    /**
     * 
     * @type {ExpandTreeNodeOperation}
     * @memberof ExpandTreeNode
     */
    operation?: ExpandTreeNodeOperation;
    /**
     * 
     * @type {Array<Expand>}
     * @memberof ExpandTreeNode
     */
    children?: Array<Expand>;
}

/**
 * Check if a given object implements the ExpandTreeNode interface.
 */
export function instanceOfExpandTreeNode(value: object): value is ExpandTreeNode {
    return true;
}

export function ExpandTreeNodeFromJSON(json: any): ExpandTreeNode {
    return ExpandTreeNodeFromJSONTyped(json, false);
}

export function ExpandTreeNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpandTreeNode {
    if (json == null) {
        return json;
    }
    return {
        
        'operation': json['operation'] == null ? undefined : ExpandTreeNodeOperationFromJSON(json['operation']),
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(ExpandFromJSON)),
    };
}

export function ExpandTreeNodeToJSON(value?: ExpandTreeNode | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'operation': ExpandTreeNodeOperationToJSON(value['operation']),
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(ExpandToJSON)),
    };
}

