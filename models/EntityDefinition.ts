/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelationDefinition } from './RelationDefinition';
import {
    RelationDefinitionFromJSON,
    RelationDefinitionFromJSONTyped,
    RelationDefinitionToJSON,
} from './RelationDefinition';
import type { PermissionDefinition } from './PermissionDefinition';
import {
    PermissionDefinitionFromJSON,
    PermissionDefinitionFromJSONTyped,
    PermissionDefinitionToJSON,
} from './PermissionDefinition';
import type { EntityDefinitionReference } from './EntityDefinitionReference';
import {
    EntityDefinitionReferenceFromJSON,
    EntityDefinitionReferenceFromJSONTyped,
    EntityDefinitionReferenceToJSON,
} from './EntityDefinitionReference';
import type { AttributeDefinition } from './AttributeDefinition';
import {
    AttributeDefinitionFromJSON,
    AttributeDefinitionFromJSONTyped,
    AttributeDefinitionToJSON,
} from './AttributeDefinition';

/**
 * The EntityDefinition message provides detailed information about a specific entity.
 * @export
 * @interface EntityDefinition
 */
export interface EntityDefinition {
    /**
     * The name of the entity, which follows a specific string pattern and has a maximum byte size.
     * @type {string}
     * @memberof EntityDefinition
     */
    name?: string;
    /**
     * Map of relation definitions within this entity. The key is the relation name, and the value is the RelationDefinition.
     * @type {{ [key: string]: RelationDefinition; }}
     * @memberof EntityDefinition
     */
    relations?: { [key: string]: RelationDefinition; };
    /**
     * Map of permission definitions within this entity. The key is the permission name, and the value is the PermissionDefinition.
     * @type {{ [key: string]: PermissionDefinition; }}
     * @memberof EntityDefinition
     */
    permissions?: { [key: string]: PermissionDefinition; };
    /**
     * Map of attribute definitions within this entity. The key is the attribute name, and the value is the AttributeDefinition.
     * @type {{ [key: string]: AttributeDefinition; }}
     * @memberof EntityDefinition
     */
    attributes?: { [key: string]: AttributeDefinition; };
    /**
     * Map of references indicating whether a string pertains to a relation, permission, or attribute.
     * @type {{ [key: string]: EntityDefinitionReference; }}
     * @memberof EntityDefinition
     */
    references?: { [key: string]: EntityDefinitionReference; };
}

/**
 * Check if a given object implements the EntityDefinition interface.
 */
export function instanceOfEntityDefinition(value: object): value is EntityDefinition {
    return true;
}

export function EntityDefinitionFromJSON(json: any): EntityDefinition {
    return EntityDefinitionFromJSONTyped(json, false);
}

export function EntityDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'relations': json['relations'] == null ? undefined : (mapValues(json['relations'], RelationDefinitionFromJSON)),
        'permissions': json['permissions'] == null ? undefined : (mapValues(json['permissions'], PermissionDefinitionFromJSON)),
        'attributes': json['attributes'] == null ? undefined : (mapValues(json['attributes'], AttributeDefinitionFromJSON)),
        'references': json['references'] == null ? undefined : (mapValues(json['references'], EntityDefinitionReferenceFromJSON)),
    };
}

export function EntityDefinitionToJSON(value?: EntityDefinition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'relations': value['relations'] == null ? undefined : (mapValues(value['relations'], RelationDefinitionToJSON)),
        'permissions': value['permissions'] == null ? undefined : (mapValues(value['permissions'], PermissionDefinitionToJSON)),
        'attributes': value['attributes'] == null ? undefined : (mapValues(value['attributes'], AttributeDefinitionToJSON)),
        'references': value['references'] == null ? undefined : (mapValues(value['references'], EntityDefinitionReferenceToJSON)),
    };
}

