/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComputedAttribute } from './ComputedAttribute';
import {
    ComputedAttributeFromJSON,
    ComputedAttributeFromJSONTyped,
    ComputedAttributeToJSON,
} from './ComputedAttribute';
import type { ContextAttribute } from './ContextAttribute';
import {
    ContextAttributeFromJSON,
    ContextAttributeFromJSONTyped,
    ContextAttributeToJSON,
} from './ContextAttribute';

/**
 * Argument defines the type of argument in a Call. It can be either a ComputedAttribute or a ContextAttribute.
 * @export
 * @interface Argument
 */
export interface Argument {
    /**
     * 
     * @type {ComputedAttribute}
     * @memberof Argument
     */
    computedAttribute?: ComputedAttribute;
    /**
     * 
     * @type {ContextAttribute}
     * @memberof Argument
     */
    contextAttribute?: ContextAttribute;
}

/**
 * Check if a given object implements the Argument interface.
 */
export function instanceOfArgument(value: object): value is Argument {
    return true;
}

export function ArgumentFromJSON(json: any): Argument {
    return ArgumentFromJSONTyped(json, false);
}

export function ArgumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Argument {
    if (json == null) {
        return json;
    }
    return {
        
        'computedAttribute': json['computedAttribute'] == null ? undefined : ComputedAttributeFromJSON(json['computedAttribute']),
        'contextAttribute': json['contextAttribute'] == null ? undefined : ContextAttributeFromJSON(json['contextAttribute']),
    };
}

export function ArgumentToJSON(value?: Argument | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'computedAttribute': ComputedAttributeToJSON(value['computedAttribute']),
        'contextAttribute': ContextAttributeToJSON(value['contextAttribute']),
    };
}

