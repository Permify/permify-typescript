/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Expr } from './Expr';
import {
    ExprFromJSON,
    ExprFromJSONTyped,
    ExprToJSON,
} from './Expr';

/**
 * Represents an entry.
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * Required. An id assigned to this node by the parser which is unique
     * in a given expression tree. This is used to associate type
     * information and other attributes to the node.
     * @type {string}
     * @memberof Entry
     */
    id?: string;
    /**
     * The field key for a message creator statement.
     * @type {string}
     * @memberof Entry
     */
    fieldKey?: string;
    /**
     * 
     * @type {Expr}
     * @memberof Entry
     */
    mapKey?: Expr;
    /**
     * 
     * @type {Expr}
     * @memberof Entry
     */
    value?: Expr;
    /**
     * Whether the key-value pair is optional.
     * @type {boolean}
     * @memberof Entry
     */
    optionalEntry?: boolean;
}

/**
 * Check if a given object implements the Entry interface.
 */
export function instanceOfEntry(value: object): value is Entry {
    return true;
}

export function EntryFromJSON(json: any): Entry {
    return EntryFromJSONTyped(json, false);
}

export function EntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entry {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'fieldKey': json['fieldKey'] == null ? undefined : json['fieldKey'],
        'mapKey': json['mapKey'] == null ? undefined : ExprFromJSON(json['mapKey']),
        'value': json['value'] == null ? undefined : ExprFromJSON(json['value']),
        'optionalEntry': json['optionalEntry'] == null ? undefined : json['optionalEntry'],
    };
}

export function EntryToJSON(value?: Entry | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'fieldKey': value['fieldKey'],
        'mapKey': ExprToJSON(value['mapKey']),
        'value': ExprToJSON(value['value']),
        'optionalEntry': value['optionalEntry'],
    };
}

