/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * CEL primitive types.
 * 
 *  - PRIMITIVE_TYPE_UNSPECIFIED: Unspecified type.
 *  - BOOL: Boolean type.
 *  - INT64: Int64 type.
 * 
 * Proto-based integer values are widened to int64.
 *  - UINT64: Uint64 type.
 * 
 * Proto-based unsigned integer values are widened to uint64.
 *  - DOUBLE: Double type.
 * 
 * Proto-based float values are widened to double values.
 *  - STRING: String type.
 *  - BYTES: Bytes type.
 * @export
 */
export const PrimitiveType = {
    PrimitiveTypeUnspecified: 'PRIMITIVE_TYPE_UNSPECIFIED',
    Bool: 'BOOL',
    Int64: 'INT64',
    Uint64: 'UINT64',
    Double: 'DOUBLE',
    String: 'STRING',
    Bytes: 'BYTES'
} as const;
export type PrimitiveType = typeof PrimitiveType[keyof typeof PrimitiveType];


export function instanceOfPrimitiveType(value: any): boolean {
    for (const key in PrimitiveType) {
        if (Object.prototype.hasOwnProperty.call(PrimitiveType, key)) {
            if ((PrimitiveType as Record<string, PrimitiveType>)[key] === value) {
                return true;
            }
        }
    }
    return false;
}

export function PrimitiveTypeFromJSON(json: any): PrimitiveType {
    return PrimitiveTypeFromJSONTyped(json, false);
}

export function PrimitiveTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrimitiveType {
    return json as PrimitiveType;
}

export function PrimitiveTypeToJSON(value?: PrimitiveType | null): any {
    return value as any;
}

