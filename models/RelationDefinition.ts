/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelationReference } from './RelationReference';
import {
    RelationReferenceFromJSON,
    RelationReferenceFromJSONTyped,
    RelationReferenceToJSON,
} from './RelationReference';

/**
 * The RelationDefinition message provides detailed information about a specific relation.
 * @export
 * @interface RelationDefinition
 */
export interface RelationDefinition {
    /**
     * The name of the relation, which follows a specific string pattern and has a maximum byte size.
     * @type {string}
     * @memberof RelationDefinition
     */
    name?: string;
    /**
     * A list of references to other relations.
     * @type {Array<RelationReference>}
     * @memberof RelationDefinition
     */
    relationReferences?: Array<RelationReference>;
}

/**
 * Check if a given object implements the RelationDefinition interface.
 */
export function instanceOfRelationDefinition(value: object): value is RelationDefinition {
    return true;
}

export function RelationDefinitionFromJSON(json: any): RelationDefinition {
    return RelationDefinitionFromJSONTyped(json, false);
}

export function RelationDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'relationReferences': json['relationReferences'] == null ? undefined : ((json['relationReferences'] as Array<any>).map(RelationReferenceFromJSON)),
    };
}

export function RelationDefinitionToJSON(value?: RelationDefinition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'relationReferences': value['relationReferences'] == null ? undefined : ((value['relationReferences'] as Array<any>).map(RelationReferenceToJSON)),
    };
}

