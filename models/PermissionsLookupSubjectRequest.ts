/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Context } from './Context';
import {
    ContextFromJSON,
    ContextFromJSONTyped,
    ContextToJSON,
} from './Context';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { PermissionLookupSubjectRequestMetadata } from './PermissionLookupSubjectRequestMetadata';
import {
    PermissionLookupSubjectRequestMetadataFromJSON,
    PermissionLookupSubjectRequestMetadataFromJSONTyped,
    PermissionLookupSubjectRequestMetadataToJSON,
} from './PermissionLookupSubjectRequestMetadata';
import type { RelationReference } from './RelationReference';
import {
    RelationReferenceFromJSON,
    RelationReferenceFromJSONTyped,
    RelationReferenceToJSON,
} from './RelationReference';

/**
 * PermissionLookupSubjectRequest is the request message for the LookupSubject method in the Permission service.
 * @export
 * @interface PermissionsLookupSubjectRequest
 */
export interface PermissionsLookupSubjectRequest {
    /**
     * 
     * @type {PermissionLookupSubjectRequestMetadata}
     * @memberof PermissionsLookupSubjectRequest
     */
    metadata?: PermissionLookupSubjectRequestMetadata;
    /**
     * 
     * @type {Entity}
     * @memberof PermissionsLookupSubjectRequest
     */
    entity?: Entity;
    /**
     * Permission to be checked, can be a permission or relation. Required, and must match the pattern "^([a-zA-Z][a-zA-Z0-9_]{1,62}[a-zA-Z0-9])$", max 64 bytes.
     * @type {string}
     * @memberof PermissionsLookupSubjectRequest
     */
    permission?: string;
    /**
     * 
     * @type {RelationReference}
     * @memberof PermissionsLookupSubjectRequest
     */
    subjectReference?: RelationReference;
    /**
     * 
     * @type {Context}
     * @memberof PermissionsLookupSubjectRequest
     */
    context?: Context;
}

/**
 * Check if a given object implements the PermissionsLookupSubjectRequest interface.
 */
export function instanceOfPermissionsLookupSubjectRequest(value: object): value is PermissionsLookupSubjectRequest {
    return true;
}

export function PermissionsLookupSubjectRequestFromJSON(json: any): PermissionsLookupSubjectRequest {
    return PermissionsLookupSubjectRequestFromJSONTyped(json, false);
}

export function PermissionsLookupSubjectRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionsLookupSubjectRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'metadata': json['metadata'] == null ? undefined : PermissionLookupSubjectRequestMetadataFromJSON(json['metadata']),
        'entity': json['entity'] == null ? undefined : EntityFromJSON(json['entity']),
        'permission': json['permission'] == null ? undefined : json['permission'],
        'subjectReference': json['subject_reference'] == null ? undefined : RelationReferenceFromJSON(json['subject_reference']),
        'context': json['context'] == null ? undefined : ContextFromJSON(json['context']),
    };
}

export function PermissionsLookupSubjectRequestToJSON(value?: PermissionsLookupSubjectRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'metadata': PermissionLookupSubjectRequestMetadataToJSON(value['metadata']),
        'entity': EntityToJSON(value['entity']),
        'permission': value['permission'],
        'subject_reference': RelationReferenceToJSON(value['subjectReference']),
        'context': ContextToJSON(value['context']),
    };
}

