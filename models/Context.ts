/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attribute } from './Attribute';
import {
    AttributeFromJSON,
    AttributeFromJSONTyped,
    AttributeToJSON,
} from './Attribute';
import type { Tuple } from './Tuple';
import {
    TupleFromJSON,
    TupleFromJSONTyped,
    TupleToJSON,
} from './Tuple';

/**
 * Context encapsulates the information related to a single operation,
 * including the tuples involved and the associated attributes.
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * A repeated field of tuples involved in the operation.
     * @type {Array<Tuple>}
     * @memberof Context
     */
    tuples?: Array<Tuple>;
    /**
     * A repeated field of attributes associated with the operation.
     * @type {Array<Attribute>}
     * @memberof Context
     */
    attributes?: Array<Attribute>;
    /**
     * Additional data associated with the context.
     * @type {object}
     * @memberof Context
     */
    data?: object;
}

/**
 * Check if a given object implements the Context interface.
 */
export function instanceOfContext(value: object): value is Context {
    return true;
}

export function ContextFromJSON(json: any): Context {
    return ContextFromJSONTyped(json, false);
}

export function ContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): Context {
    if (json == null) {
        return json;
    }
    return {
        
        'tuples': json['tuples'] == null ? undefined : ((json['tuples'] as Array<any>).map(TupleFromJSON)),
        'attributes': json['attributes'] == null ? undefined : ((json['attributes'] as Array<any>).map(AttributeFromJSON)),
        'data': json['data'] == null ? undefined : json['data'],
    };
}

export function ContextToJSON(value?: Context | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'tuples': value['tuples'] == null ? undefined : ((value['tuples'] as Array<any>).map(TupleToJSON)),
        'attributes': value['attributes'] == null ? undefined : ((value['attributes'] as Array<any>).map(AttributeToJSON)),
        'data': value['data'],
    };
}

