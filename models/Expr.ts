/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateList } from './CreateList';
import {
    CreateListFromJSON,
    CreateListFromJSONTyped,
    CreateListToJSON,
} from './CreateList';
import type { ExprCall } from './ExprCall';
import {
    ExprCallFromJSON,
    ExprCallFromJSONTyped,
    ExprCallToJSON,
} from './ExprCall';
import type { Ident } from './Ident';
import {
    IdentFromJSON,
    IdentFromJSONTyped,
    IdentToJSON,
} from './Ident';
import type { CreateStruct } from './CreateStruct';
import {
    CreateStructFromJSON,
    CreateStructFromJSONTyped,
    CreateStructToJSON,
} from './CreateStruct';
import type { Constant } from './Constant';
import {
    ConstantFromJSON,
    ConstantFromJSONTyped,
    ConstantToJSON,
} from './Constant';
import type { Select } from './Select';
import {
    SelectFromJSON,
    SelectFromJSONTyped,
    SelectToJSON,
} from './Select';
import type { Comprehension } from './Comprehension';
import {
    ComprehensionFromJSON,
    ComprehensionFromJSONTyped,
    ComprehensionToJSON,
} from './Comprehension';

/**
 * An abstract representation of a common expression.
 * 
 * Expressions are abstractly represented as a collection of identifiers,
 * select statements, function calls, literals, and comprehensions. All
 * operators with the exception of the '.' operator are modelled as function
 * calls. This makes it easy to represent new operators into the existing AST.
 * 
 * All references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at
 * type-check for an expression to be valid. A reference may either be a bare
 * identifier `name` or a qualified identifier `google.api.name`. References
 * may either refer to a value or a function declaration.
 * 
 * For example, the expression `google.api.name.startsWith('expr')` references
 * the declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and
 * the function declaration `startsWith`.
 * @export
 * @interface Expr
 */
export interface Expr {
    /**
     * Required. An id assigned to this node by the parser which is unique in a
     * given expression tree. This is used to associate type information and other
     * attributes to a node in the parse tree.
     * @type {string}
     * @memberof Expr
     */
    id?: string;
    /**
     * 
     * @type {Constant}
     * @memberof Expr
     */
    constExpr?: Constant;
    /**
     * 
     * @type {Ident}
     * @memberof Expr
     */
    identExpr?: Ident;
    /**
     * 
     * @type {Select}
     * @memberof Expr
     */
    selectExpr?: Select;
    /**
     * 
     * @type {ExprCall}
     * @memberof Expr
     */
    callExpr?: ExprCall;
    /**
     * 
     * @type {CreateList}
     * @memberof Expr
     */
    listExpr?: CreateList;
    /**
     * 
     * @type {CreateStruct}
     * @memberof Expr
     */
    structExpr?: CreateStruct;
    /**
     * 
     * @type {Comprehension}
     * @memberof Expr
     */
    comprehensionExpr?: Comprehension;
}

/**
 * Check if a given object implements the Expr interface.
 */
export function instanceOfExpr(value: object): value is Expr {
    return true;
}

export function ExprFromJSON(json: any): Expr {
    return ExprFromJSONTyped(json, false);
}

export function ExprFromJSONTyped(json: any, ignoreDiscriminator: boolean): Expr {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'constExpr': json['constExpr'] == null ? undefined : ConstantFromJSON(json['constExpr']),
        'identExpr': json['identExpr'] == null ? undefined : IdentFromJSON(json['identExpr']),
        'selectExpr': json['selectExpr'] == null ? undefined : SelectFromJSON(json['selectExpr']),
        'callExpr': json['callExpr'] == null ? undefined : ExprCallFromJSON(json['callExpr']),
        'listExpr': json['listExpr'] == null ? undefined : CreateListFromJSON(json['listExpr']),
        'structExpr': json['structExpr'] == null ? undefined : CreateStructFromJSON(json['structExpr']),
        'comprehensionExpr': json['comprehensionExpr'] == null ? undefined : ComprehensionFromJSON(json['comprehensionExpr']),
    };
}

export function ExprToJSON(value?: Expr | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'constExpr': ConstantToJSON(value['constExpr']),
        'identExpr': IdentToJSON(value['identExpr']),
        'selectExpr': SelectToJSON(value['selectExpr']),
        'callExpr': ExprCallToJSON(value['callExpr']),
        'listExpr': CreateListToJSON(value['listExpr']),
        'structExpr': CreateStructToJSON(value['structExpr']),
        'comprehensionExpr': ComprehensionToJSON(value['comprehensionExpr']),
    };
}

