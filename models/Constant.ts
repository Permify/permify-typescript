/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a primitive literal.
 * 
 * Named 'Constant' here for backwards compatibility.
 * 
 * This is similar as the primitives supported in the well-known type
 * `google.protobuf.Value`, but richer so it can represent CEL's full range of
 * primitives.
 * 
 * Lists and structs are not included as constants as these aggregate types may
 * contain [Expr][google.api.expr.v1alpha1.Expr] elements which require evaluation and are thus not constant.
 * 
 * Examples of literals include: `"hello"`, `b'bytes'`, `1u`, `4.2`, `-2`,
 * `true`, `null`.
 * @export
 * @interface Constant
 */
export interface Constant {
    /**
     * null value.
     * @type {string}
     * @memberof Constant
     */
    nullValue?: string;
    /**
     * boolean value.
     * @type {boolean}
     * @memberof Constant
     */
    boolValue?: boolean;
    /**
     * int64 value.
     * @type {string}
     * @memberof Constant
     */
    int64Value?: string;
    /**
     * uint64 value.
     * @type {string}
     * @memberof Constant
     */
    uint64Value?: string;
    /**
     * double value.
     * @type {number}
     * @memberof Constant
     */
    doubleValue?: number;
    /**
     * string value.
     * @type {string}
     * @memberof Constant
     */
    stringValue?: string;
    /**
     * bytes value.
     * @type {string}
     * @memberof Constant
     */
    bytesValue?: string;
    /**
     * protobuf.Duration value.
     * 
     * Deprecated: duration is no longer considered a builtin cel type.
     * @type {string}
     * @memberof Constant
     */
    durationValue?: string;
    /**
     * protobuf.Timestamp value.
     * 
     * Deprecated: timestamp is no longer considered a builtin cel type.
     * @type {Date}
     * @memberof Constant
     */
    timestampValue?: Date;
}

/**
 * Check if a given object implements the Constant interface.
 */
export function instanceOfConstant(value: object): value is Constant {
    return true;
}

export function ConstantFromJSON(json: any): Constant {
    return ConstantFromJSONTyped(json, false);
}

export function ConstantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Constant {
    if (json == null) {
        return json;
    }
    return {
        
        'nullValue': json['nullValue'] == null ? undefined : json['nullValue'],
        'boolValue': json['boolValue'] == null ? undefined : json['boolValue'],
        'int64Value': json['int64Value'] == null ? undefined : json['int64Value'],
        'uint64Value': json['uint64Value'] == null ? undefined : json['uint64Value'],
        'doubleValue': json['doubleValue'] == null ? undefined : json['doubleValue'],
        'stringValue': json['stringValue'] == null ? undefined : json['stringValue'],
        'bytesValue': json['bytesValue'] == null ? undefined : json['bytesValue'],
        'durationValue': json['durationValue'] == null ? undefined : json['durationValue'],
        'timestampValue': json['timestampValue'] == null ? undefined : (new Date(json['timestampValue'])),
    };
}

export function ConstantToJSON(value?: Constant | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'nullValue': value['nullValue'],
        'boolValue': value['boolValue'],
        'int64Value': value['int64Value'],
        'uint64Value': value['uint64Value'],
        'doubleValue': value['doubleValue'],
        'stringValue': value['stringValue'],
        'bytesValue': value['bytesValue'],
        'durationValue': value['durationValue'],
        'timestampValue': value['timestampValue'] == null ? undefined : ((value['timestampValue']).toISOString()),
    };
}

