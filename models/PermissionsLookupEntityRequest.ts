/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Context } from './Context';
import {
    ContextFromJSON,
    ContextFromJSONTyped,
    ContextToJSON,
} from './Context';
import type { PermissionLookupEntityRequestMetadata } from './PermissionLookupEntityRequestMetadata';
import {
    PermissionLookupEntityRequestMetadataFromJSON,
    PermissionLookupEntityRequestMetadataFromJSONTyped,
    PermissionLookupEntityRequestMetadataToJSON,
} from './PermissionLookupEntityRequestMetadata';
import type { Subject } from './Subject';
import {
    SubjectFromJSON,
    SubjectFromJSONTyped,
    SubjectToJSON,
} from './Subject';

/**
 * PermissionLookupEntityRequest is the request message for the LookupEntity method in the Permission service.
 * @export
 * @interface PermissionsLookupEntityRequest
 */
export interface PermissionsLookupEntityRequest {
    /**
     * 
     * @type {PermissionLookupEntityRequestMetadata}
     * @memberof PermissionsLookupEntityRequest
     */
    metadata?: PermissionLookupEntityRequestMetadata;
    /**
     * Type of the entity to lookup, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes.
     * @type {string}
     * @memberof PermissionsLookupEntityRequest
     */
    entityType?: string;
    /**
     * Name of the permission to check, required, must start with a letter and can include alphanumeric and underscore, max 64 bytes.
     * @type {string}
     * @memberof PermissionsLookupEntityRequest
     */
    permission?: string;
    /**
     * 
     * @type {Subject}
     * @memberof PermissionsLookupEntityRequest
     */
    subject?: Subject;
    /**
     * 
     * @type {Context}
     * @memberof PermissionsLookupEntityRequest
     */
    context?: Context;
}

/**
 * Check if a given object implements the PermissionsLookupEntityRequest interface.
 */
export function instanceOfPermissionsLookupEntityRequest(value: object): value is PermissionsLookupEntityRequest {
    return true;
}

export function PermissionsLookupEntityRequestFromJSON(json: any): PermissionsLookupEntityRequest {
    return PermissionsLookupEntityRequestFromJSONTyped(json, false);
}

export function PermissionsLookupEntityRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionsLookupEntityRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'metadata': json['metadata'] == null ? undefined : PermissionLookupEntityRequestMetadataFromJSON(json['metadata']),
        'entityType': json['entity_type'] == null ? undefined : json['entity_type'],
        'permission': json['permission'] == null ? undefined : json['permission'],
        'subject': json['subject'] == null ? undefined : SubjectFromJSON(json['subject']),
        'context': json['context'] == null ? undefined : ContextFromJSON(json['context']),
    };
}

export function PermissionsLookupEntityRequestToJSON(value?: PermissionsLookupEntityRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'metadata': PermissionLookupEntityRequestMetadataToJSON(value['metadata']),
        'entity_type': value['entityType'],
        'permission': value['permission'],
        'subject': SubjectToJSON(value['subject']),
        'context': ContextToJSON(value['context']),
    };
}

