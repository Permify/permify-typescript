/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { ExpandLeaf } from './ExpandLeaf';
import {
    ExpandLeafFromJSON,
    ExpandLeafFromJSONTyped,
    ExpandLeafToJSON,
} from './ExpandLeaf';
import type { Argument } from './Argument';
import {
    ArgumentFromJSON,
    ArgumentFromJSONTyped,
    ArgumentToJSON,
} from './Argument';
import type { ExpandTreeNode } from './ExpandTreeNode';
import {
    ExpandTreeNodeFromJSON,
    ExpandTreeNodeFromJSONTyped,
    ExpandTreeNodeToJSON,
} from './ExpandTreeNode';

/**
 * Expand is used to define a hierarchical structure for permissions.
 * It has an entity, permission, and arguments. The node can be either another hierarchical structure or a set of subjects.
 * @export
 * @interface Expand
 */
export interface Expand {
    /**
     * 
     * @type {Entity}
     * @memberof Expand
     */
    entity?: Entity;
    /**
     * permission is the permission applied to the entity.
     * @type {string}
     * @memberof Expand
     */
    permission?: string;
    /**
     * arguments are the additional information or context used to evaluate permissions.
     * @type {Array<Argument>}
     * @memberof Expand
     */
    arguments?: Array<Argument>;
    /**
     * 
     * @type {ExpandTreeNode}
     * @memberof Expand
     */
    expand?: ExpandTreeNode;
    /**
     * 
     * @type {ExpandLeaf}
     * @memberof Expand
     */
    leaf?: ExpandLeaf;
}

/**
 * Check if a given object implements the Expand interface.
 */
export function instanceOfExpand(value: object): value is Expand {
    return true;
}

export function ExpandFromJSON(json: any): Expand {
    return ExpandFromJSONTyped(json, false);
}

export function ExpandFromJSONTyped(json: any, ignoreDiscriminator: boolean): Expand {
    if (json == null) {
        return json;
    }
    return {
        
        'entity': json['entity'] == null ? undefined : EntityFromJSON(json['entity']),
        'permission': json['permission'] == null ? undefined : json['permission'],
        'arguments': json['arguments'] == null ? undefined : ((json['arguments'] as Array<any>).map(ArgumentFromJSON)),
        'expand': json['expand'] == null ? undefined : ExpandTreeNodeFromJSON(json['expand']),
        'leaf': json['leaf'] == null ? undefined : ExpandLeafFromJSON(json['leaf']),
    };
}

export function ExpandToJSON(value?: Expand | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'entity': EntityToJSON(value['entity']),
        'permission': value['permission'],
        'arguments': value['arguments'] == null ? undefined : ((value['arguments'] as Array<any>).map(ArgumentToJSON)),
        'expand': ExpandTreeNodeToJSON(value['expand']),
        'leaf': ExpandLeafToJSON(value['leaf']),
    };
}

