/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Expr } from './Expr';
import {
    ExprFromJSON,
    ExprFromJSONTyped,
    ExprToJSON,
} from './Expr';

/**
 * Source information collected at parse time.
 * @export
 * @interface SourceInfo
 */
export interface SourceInfo {
    /**
     * The syntax version of the source, e.g. `cel1`.
     * @type {string}
     * @memberof SourceInfo
     */
    syntaxVersion?: string;
    /**
     * The location name. All position information attached to an expression is
     * relative to this location.
     * 
     * The location could be a file, UI element, or similar. For example,
     * `acme/app/AnvilPolicy.cel`.
     * @type {string}
     * @memberof SourceInfo
     */
    location?: string;
    /**
     * Monotonically increasing list of code point offsets where newlines
     * `\n` appear.
     * 
     * The line number of a given position is the index `i` where for a given
     * `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
     * column may be derivd from `id_positions[id] - line_offsets[i]`.
     * @type {Array<number>}
     * @memberof SourceInfo
     */
    lineOffsets?: Array<number>;
    /**
     * A map from the parse node id (e.g. `Expr.id`) to the code point offset
     * within the source.
     * @type {{ [key: string]: number; }}
     * @memberof SourceInfo
     */
    positions?: { [key: string]: number; };
    /**
     * A map from the parse node id where a macro replacement was made to the
     * call `Expr` that resulted in a macro expansion.
     * 
     * For example, `has(value.field)` is a function call that is replaced by a
     * `test_only` field selection in the AST. Likewise, the call
     * `list.exists(e, e > 10)` translates to a comprehension expression. The key
     * in the map corresponds to the expression id of the expanded macro, and the
     * value is the call `Expr` that was replaced.
     * @type {{ [key: string]: Expr; }}
     * @memberof SourceInfo
     */
    macroCalls?: { [key: string]: Expr; };
}

/**
 * Check if a given object implements the SourceInfo interface.
 */
export function instanceOfSourceInfo(value: object): value is SourceInfo {
    return true;
}

export function SourceInfoFromJSON(json: any): SourceInfo {
    return SourceInfoFromJSONTyped(json, false);
}

export function SourceInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SourceInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'syntaxVersion': json['syntaxVersion'] == null ? undefined : json['syntaxVersion'],
        'location': json['location'] == null ? undefined : json['location'],
        'lineOffsets': json['lineOffsets'] == null ? undefined : json['lineOffsets'],
        'positions': json['positions'] == null ? undefined : json['positions'],
        'macroCalls': json['macroCalls'] == null ? undefined : (mapValues(json['macroCalls'], ExprFromJSON)),
    };
}

export function SourceInfoToJSON(value?: SourceInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'syntaxVersion': value['syntaxVersion'],
        'location': value['location'],
        'lineOffsets': value['lineOffsets'],
        'positions': value['positions'],
        'macroCalls': value['macroCalls'] == null ? undefined : (mapValues(value['macroCalls'], ExprToJSON)),
    };
}

