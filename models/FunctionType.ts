/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1alpha1Type } from './V1alpha1Type';
import {
    V1alpha1TypeFromJSON,
    V1alpha1TypeFromJSONTyped,
    V1alpha1TypeToJSON,
} from './V1alpha1Type';

/**
 * Function type with result and arg types.
 * @export
 * @interface FunctionType
 */
export interface FunctionType {
    /**
     * 
     * @type {V1alpha1Type}
     * @memberof FunctionType
     */
    resultType?: V1alpha1Type;
    /**
     * Argument types of the function.
     * @type {Array<V1alpha1Type>}
     * @memberof FunctionType
     */
    argTypes?: Array<V1alpha1Type>;
}

/**
 * Check if a given object implements the FunctionType interface.
 */
export function instanceOfFunctionType(value: object): value is FunctionType {
    return true;
}

export function FunctionTypeFromJSON(json: any): FunctionType {
    return FunctionTypeFromJSONTyped(json, false);
}

export function FunctionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionType {
    if (json == null) {
        return json;
    }
    return {
        
        'resultType': json['resultType'] == null ? undefined : V1alpha1TypeFromJSON(json['resultType']),
        'argTypes': json['argTypes'] == null ? undefined : ((json['argTypes'] as Array<any>).map(V1alpha1TypeFromJSON)),
    };
}

export function FunctionTypeToJSON(value?: FunctionType | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'resultType': V1alpha1TypeToJSON(value['resultType']),
        'argTypes': value['argTypes'] == null ? undefined : ((value['argTypes'] as Array<any>).map(V1alpha1TypeToJSON)),
    };
}

