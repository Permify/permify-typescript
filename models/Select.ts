/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Expr } from './Expr';
import {
    ExprFromJSON,
    ExprFromJSONTyped,
    ExprToJSON,
} from './Expr';

/**
 * A field selection expression. e.g. `request.auth`.
 * @export
 * @interface Select
 */
export interface Select {
    /**
     * 
     * @type {Expr}
     * @memberof Select
     */
    operand?: Expr;
    /**
     * Required. The name of the field to select.
     * 
     * For example, in the select expression `request.auth`, the `auth` portion
     * of the expression would be the `field`.
     * @type {string}
     * @memberof Select
     */
    field?: string;
    /**
     * Whether the select is to be interpreted as a field presence test.
     * 
     * This results from the macro `has(request.auth)`.
     * @type {boolean}
     * @memberof Select
     */
    testOnly?: boolean;
}

/**
 * Check if a given object implements the Select interface.
 */
export function instanceOfSelect(value: object): value is Select {
    return true;
}

export function SelectFromJSON(json: any): Select {
    return SelectFromJSONTyped(json, false);
}

export function SelectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Select {
    if (json == null) {
        return json;
    }
    return {
        
        'operand': json['operand'] == null ? undefined : ExprFromJSON(json['operand']),
        'field': json['field'] == null ? undefined : json['field'],
        'testOnly': json['testOnly'] == null ? undefined : json['testOnly'],
    };
}

export function SelectToJSON(value?: Select | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'operand': ExprToJSON(value['operand']),
        'field': value['field'],
        'testOnly': value['testOnly'],
    };
}

