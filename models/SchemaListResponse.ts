/* tslint:disable */
/* eslint-disable */
/**
 * Permify API
 * Permify is an open source authorization service for creating fine-grained and scalable authorization systems.
 *
 * The version of the OpenAPI document: v0.9.9
 * Contact: hello@permify.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SchemaList } from './SchemaList';
import {
    SchemaListFromJSON,
    SchemaListFromJSONTyped,
    SchemaListToJSON,
} from './SchemaList';

/**
 * 
 * @export
 * @interface SchemaListResponse
 */
export interface SchemaListResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemaListResponse
     */
    head?: string;
    /**
     * 
     * @type {Array<SchemaList>}
     * @memberof SchemaListResponse
     */
    schemas?: Array<SchemaList>;
    /**
     * continuous_token is a string that can be used to paginate and retrieve the next set of results.
     * @type {string}
     * @memberof SchemaListResponse
     */
    continuousToken?: string;
}

/**
 * Check if a given object implements the SchemaListResponse interface.
 */
export function instanceOfSchemaListResponse(value: object): value is SchemaListResponse {
    return true;
}

export function SchemaListResponseFromJSON(json: any): SchemaListResponse {
    return SchemaListResponseFromJSONTyped(json, false);
}

export function SchemaListResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaListResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'head': json['head'] == null ? undefined : json['head'],
        'schemas': json['schemas'] == null ? undefined : ((json['schemas'] as Array<any>).map(SchemaListFromJSON)),
        'continuousToken': json['continuous_token'] == null ? undefined : json['continuous_token'],
    };
}

export function SchemaListResponseToJSON(value?: SchemaListResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'head': value['head'],
        'schemas': value['schemas'] == null ? undefined : ((value['schemas'] as Array<any>).map(SchemaListToJSON)),
        'continuous_token': value['continuousToken'],
    };
}

